{
  "env": {
      "browser": true,
      "es2021": true
  },
  "root": true,
  "extends": [
    "eslint:recommended",
    "plugin:@typescript-eslint/recommended",
    "plugin:vue/vue3-recommended"
  ],
  "plugins": [
      "@typescript-eslint",
      "eslint-plugin-vue"
  ],
  "parser": "vue-eslint-parser",
  "parserOptions": {
      "ecmaVersion": "latest",
      "sourceType": "module",
      // "project": ["./tsconfig.json"],
      "parser": "@typescript-eslint/parser"
  },
  "overrides": [
  ],
  "rules": {
    "no-console": "off", // rule disallows calls or assignments to methods of the console object
    "no-debugger": "error", // disallow the use of debugger
    "no-undef": "off",
    "max-len": ["off", { "code": 140 }], // enforce a maximum line length
    "no-useless-concat": "off", // rule aims to flag the concatenation of 2 literals when they could be combined into a single literal
    "class-methods-use-this": ["off", { "exceptMethods": ["render"] }], // rule is aimed to flag class methods that do not use thiss
    "space-infix-ops": ["off", { "int32Hint": false }],
    "no-unused-expressions": "off", // rule aims to eliminate unused expressions which have no effect on the state of the program.
    "no-plusplus": "off", // disallow the unary operators ++ and --
    "no-alert": "error", // disallow the use of alert, confirm, and prompt
    "eqeqeq": "off", // require the use of === and !==
    "linebreak-style": 0,
    "global-require": 0,
    "eslint linebreak-style": [0, "error", "windows"],
    "prefer-const": "off",

    "semi": ["off", "always"],
    "quotes": ["off", "double"],
    "indent": ["off", "2"],
    "no-unused-vars": "off",
    "no-empty-function": "off",

    "@typescript-eslint/semi": ["error", "always"], // semicolon check
    "@typescript-eslint/quotes": ["error", "single"], // check for quotes
    "@typescript-eslint/indent": ["off", "2"], // enforces a consistent indentation style
    "@typescript-eslint/no-unused-vars": "error", // disallow unused variables
    "@typescript-eslint/no-empty-function": "off", // disallow empty functions
    "@typescript-eslint/no-inferrable-types": "off", // disallow explicit type declarations for variables or parameters
    "@typescript-eslint/no-var-requires": "off", // disallow require statements except in import statements.
    "@typescript-eslint/no-explicit-any": "off",

    // This rule aims to enforce the self-closing sign as the configured style.
    "vue/html-self-closing": ["error", {
    "html": {
      "void": "always",
      "normal": "never",
      "component": "always"
    },
      "svg": "always",
      "math": "always"
    }],
    // This rule aims to warn the component definition names other than the configured casing.
    "vue/component-definition-name-casing": ["off", "PascalCase", "kebab-case"],
    "vue/no-export-in-script-setup": "off",
    // This rule requires default value to be set for each props that are not marked as required (except Boolean props).
    "vue/require-default-prop": "off",
    // This rule enforces that a props statement contains type definition.
    "vue/require-prop-types": "warn",
    // This rule checks whether every v-for directive is valid.
    "vue/valid-v-for": "error",
    // This rule enforce proper casing of props in vue components(camelCase).
    "vue/prop-name-casing": ["error", "snake_case"],
    // This rule enforces a line break before and after the contents of a singleline element.
    "vue/singleline-html-element-content-newline": ["error", {
      "ignoreWhenNoAttributes": true,
      "ignoreWhenEmpty": true,
      "ignores": ["pre", "textarea", "p", "button"]
    }],
    "vue/max-attributes-per-line": ["error", {
      "singleline": {
        "max": 1
      },      
      "multiline": {
        "max": 1
      }
    }],
    // This rule reports event triggers not declared with the emits option.
    "vue/require-explicit-emits": ["error", {
      "allowProps": false
    }],
    // This rule enforces using hyphenated v-on event names on custom components in Vue templates.
    "vue/v-on-event-hyphenation": ["error", "always", {
      "autofix": true,
      "ignore": []
    }]
  }
}